---
interface HeaderProps {
  content: string;
  status: string;
}

import Announcements from "./Announcements.astro";
import Navbar from "./Navbar.astro";

const fetchAnnouncements = async () => {
  try {
    const baseUrl = "http://localhost:3000"; // Fallback for dev environment
    const response = await fetch(`${baseUrl}/api/announcements`);
    if (!response.ok) {
      throw new Error(`Error: ${response.statusText}`);
    }
    const data = await response.json();

    if (data && data.length > 0) {
      const { content, status } = data[0]; // Access the first announcement
      return { content, status };
    } else {
      console.warn("No announcements found.");
      return { content: "", status: "inactive" }; // Default values if no data exists
    }
  } catch (error) {
    console.error("Failed to fetch announcements:", error);
    return { content: "", status: "inactive" }; // Default return on error
  }
};

// Fetch announcements and use the output as props
const { content, status } = (await fetchAnnouncements()) as HeaderProps;
const activeAnnouncement = status === "active";
const body = content;
---

<!-- A small invisible trigger element above the header to control sticky behavior -->
<div id="trigger" style="height: 1px; background-color: #7F0201;"></div>

<header id="header" class="transition-all duration-300">
  <Announcements
    id="announcements"
    activeAnnouncement={activeAnnouncement}
    body={body}
  />
  <Navbar id="navbar" />
</header>

<!-- Spacer to preserve space when header becomes sticky -->
<div id="spacer" class="hidden"></div>

<script>
  const currentPageUrl = window.location.pathname;

  if (currentPageUrl === "/" || currentPageUrl === "/grooming") {
    const getScrollbarWidth = () => {
      const scrollDiv = document.createElement("div");
      scrollDiv.style.width = "100px";
      scrollDiv.style.height = "100px";
      scrollDiv.style.overflow = "scroll";
      scrollDiv.style.position = "absolute";
      scrollDiv.style.top = "-9999px";
      document.body.appendChild(scrollDiv);

      const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarWidth;
    };

    // Adjust header width based on scrollbar width
    const adjustHeaderWidth = () => {
      const scrollbarWidth = getScrollbarWidth();
      const header = document.getElementById("header");
      if (header) {
        header.style.width = `calc(100vw - ${scrollbarWidth}px)`;
      }
    };

    window.onload = () => {
      adjustHeaderWidth(); // Ensure the width is adjusted initially
      applyStickyObserver(); // Apply the Intersection Observer logic
    };

    // Apply sticky behavior based on Intersection Observer and viewport width
    const applyStickyObserver = () => {
      const trigger = document.getElementById("trigger") as HTMLElement;
      const header = document.getElementById("header") as HTMLElement;
      const spacer = document.getElementById("spacer") as HTMLElement;

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (!entry.isIntersecting) {
            header.classList.add("fixed", "top-0", "left-0", "z-50");
            spacer.classList.remove("hidden");
            spacer.style.height = `${header.offsetHeight}px`;
          } else {
            header.classList.remove("fixed", "top-0", "left-0");
            spacer.classList.add("hidden");
            spacer.style.height = "0px";
          }
        });
      });

      if (trigger) {
        observer.observe(trigger);
      }
    };

    // Reinitialize after each page load or navigation event
    const reinitializeHeader = () => {
      adjustHeaderWidth(); // Ensure the width is adjusted initially
      applyStickyObserver(); // Apply the Intersection Observer logic
    };

    // Run the initialization logic after DOM is fully loaded
    document.addEventListener("DOMContentLoaded", reinitializeHeader);

    // Listen for custom navigation events (client-side navigation)
    window.addEventListener("astro:page-load", reinitializeHeader);

    // Ensure the scrollbar width is recalculated on window resize
    window.addEventListener("resize", adjustHeaderWidth);
  }
</script>
