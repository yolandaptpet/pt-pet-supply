---
interface BlogLayoutProps {
  title: string;
  description: string;
  publishDate: string;
  tags: string[];
}

import Header from "../sections/Header.astro";

import { ViewTransitions } from "astro:transitions";

import "@/styles/globals.css";
import Footer from "../sections/Footer.astro";

const { title, description, publishDate, tags } =
  Astro.props as BlogLayoutProps;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <title>{title}</title>
    <link
      rel="preload"
      href="/fonts/CenzoFlare-Regular.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css"
    />
    <ViewTransitions fallback="animate" />
  </head>
  <body>
    <Header transition:persist />
    <canvas id="backgroundCanvas"></canvas>
    <article>
      <header>
        <time>{publishDate}</time>
        {tags?.map((tag) => <span class="tag">{tag}</span>)}
      </header>
      <main>
        <article class="prose">
          <slot />
        </article>
      </main>
    </article>
    <Footer />
  </body>
</html>

<style>
  html,
  body {
    height: 100%;
    margin: 0;
    padding: 0;
    overflow-x: hidden;
  }

  body {
    font-family: "Cenzo Flare", sans-serif;
  }

  #backgroundCanvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -40;
    filter: blur(100px) opacity(60%);
  }
</style>

<script>
  const canvas = document.getElementById(
    "backgroundCanvas"
  ) as HTMLCanvasElement;
  const ctx = canvas!.getContext("2d");

  const resizeCanvas = () => {
    canvas!.width = window.innerWidth;
    canvas!.height = window.innerHeight;
    drawShapes();
  };

  const drawShapes = () => {
    ctx!.clearRect(0, 0, canvas!.width, canvas!.height);
    const warmColors = ["#FFC66D"];
    for (let i = 0; i < 20; i++) {
      const x = Math.random() * canvas!.width;
      const y = Math.random() * canvas!.height;
      const length = Math.random() * 400 + 50; // Length of the streak
      const width = Math.random() * 40 + 2; // Width of the streak
      const angle = Math.random() * Math.PI * 3; // Random angle for the streak
      const color = warmColors[Math.floor(Math.random() * warmColors.length)];

      ctx!.save();
      ctx!.translate(x, y);
      ctx!.rotate(angle);
      ctx!.fillStyle = color;
      ctx!.beginPath();
      ctx!.ellipse(0, 0, length / 2, width / 2, 0, 0, Math.PI * 2);
      ctx!.fill();
      ctx!.restore();
    }
  };

  window.addEventListener("resize", resizeCanvas);
  resizeCanvas();
</script>
